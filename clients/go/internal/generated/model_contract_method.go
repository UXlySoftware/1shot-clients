/*
 * M2M Gateway API
 *
 * The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework
 *
 * API version: 0.1
 * Contact: support@uxly.software
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// A single defined method on a smart contract on a chain. You can have multiple Contract Methods defined for the same method in the smart contract if you want to use different setups for static parameters, or if you create them from different Prompts. Contract Methods are sometimes referred to as Endpoints.
type ContractMethod struct {
	Id              string  `json:"id"`
	BusinessId      string  `json:"businessId"`
	ChainId         *EChain `json:"chainId"`
	ContractAddress string  `json:"contractAddress"`
	WalletId        string  `json:"walletId"`
	// Name of the Contract Method. This is not necessarily the name of the underlying method (generally something simple like \"mint\"); this is used only in 1Shot to help you distinguish your Contract Methods. Given the Contract Method a good name will help when you have created multiple Contract Methods from different Prompts, in particular. The same \"mint\" function may be named \"Mint 10000 tokens at a time\" and \"After creating the token contract\", based on the intended use case.
	Name string `json:"name"`
	// Description of the Contract Method. This should be written for AI agents to take advantage of. This will come from the original Prompt if you create the Contract Method from a Prompt.
	Description string `json:"description"`
	// Name of the function on the contract to call for this Contract Method.
	FunctionName    string                    `json:"functionName"`
	Inputs          []SolidityStructParam     `json:"inputs"`
	Outputs         []SolidityStructParam     `json:"outputs"`
	StateMutability *ESolidityStateMutability `json:"stateMutability"`
	// The ID of the Prompt that this Contract Method was created from. This is optional, and a Contract Method can drift from the original Prompt but retain this association.
	PromptId string `json:"promptId"`
	// The current destination for webhooks to be sent when this Contract Method is executed. Will be null if no webhook is assigned.
	CallbackUrl string `json:"callbackUrl"`
	// The current public key for verifying the integrity of the webhook when this Contract Method is executed. 1Shot will sign its webhooks with a private key and provide a signature for the webhook that can be validated with this key. It will be null if there is no webhook destination specified.
	PublicKey string  `json:"publicKey"`
	Updated   float64 `json:"updated"`
	Created   float64 `json:"created"`
}

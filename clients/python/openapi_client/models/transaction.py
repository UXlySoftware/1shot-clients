# coding: utf-8

"""
    M2M Gateway API

    The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework

    The version of the OpenAPI document: 0.1
    Contact: support@uxly.software
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.solidity_struct_param import SolidityStructParam
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    A new transaction
    """ # noqa: E501
    deleted: Optional[StrictBool] = None
    updated: Optional[Union[StrictFloat, StrictInt]] = None
    created: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = Field(default=None, description="internal ID of the transaction object")
    business_id: Optional[StrictStr] = Field(default=None, description="The business that owns this transaction", alias="businessId")
    chain: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Id of a chain")
    contract_address: Optional[StrictStr] = Field(default=None, description="string address of contract", alias="contractAddress")
    escrow_wallet_id: Optional[StrictStr] = Field(default=None, description="Name of the escrowWallet that owns the transaction", alias="escrowWalletId")
    name: Optional[StrictStr] = Field(default=None, description="Name of transaction")
    description: Optional[StrictStr] = Field(default=None, description="Description of transaction")
    function_name: Optional[StrictStr] = Field(default=None, description="Name of the function on the contract to call for this transaction", alias="functionName")
    params: Optional[List[SolidityStructParam]] = None
    callback_url: Optional[StrictStr] = Field(default=None, alias="callbackUrl")
    public_key: Optional[StrictStr] = Field(default=None, alias="publicKey")
    __properties: ClassVar[List[str]] = ["deleted", "updated", "created", "id", "businessId", "chain", "contractAddress", "escrowWalletId", "name", "description", "functionName", "params", "callbackUrl", "publicKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in params (list)
        _items = []
        if self.params:
            for _item_params in self.params:
                if _item_params:
                    _items.append(_item_params.to_dict())
            _dict['params'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deleted": obj.get("deleted"),
            "updated": obj.get("updated"),
            "created": obj.get("created"),
            "id": obj.get("id"),
            "businessId": obj.get("businessId"),
            "chain": obj.get("chain"),
            "contractAddress": obj.get("contractAddress"),
            "escrowWalletId": obj.get("escrowWalletId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "functionName": obj.get("functionName"),
            "params": [SolidityStructParam.from_dict(_item) for _item in obj["params"]] if obj.get("params") is not None else None,
            "callbackUrl": obj.get("callbackUrl"),
            "publicKey": obj.get("publicKey")
        })
        return _obj



# coding: utf-8

"""
    M2M Gateway API

    The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework

    The version of the OpenAPI document: 0.1
    Contact: support@uxly.software
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.e_chain import EChain
from typing import Optional, Set
from typing_extensions import Self

class TransactionsTransactionIdPutRequest(BaseModel):
    """
    You need to provide a value for every parameter in the transaction via the name of the parameter
    """ # noqa: E501
    chain: Optional[EChain] = None
    contract_address: Optional[StrictStr] = Field(default=None, description="string address of contract", alias="contractAddress")
    escrow_wallet_id: Optional[StrictStr] = Field(default=None, description="The WebhookEndpointId", alias="escrowWalletId")
    name: Optional[StrictStr] = Field(default=None, description="The name of the transaction, used for organization purposes.")
    description: Optional[StrictStr] = Field(default=None, description="An optional description of the transaction, for your own reference in the site.")
    function_name: Optional[StrictStr] = Field(default=None, description="The name of the function on the contract. This is case-sensitive, so be sure to check your ABI.", alias="functionName")
    payable: Optional[StrictBool] = Field(default=None, description="Some transactions can move tokens with them. Check your ABI.")
    native_transaction: Optional[StrictBool] = Field(default=None, description="It is possible to create a \"native\" transaction, one that is part of the EVM and not a smart contract. Set this to true to enable native transaction handling.", alias="nativeTransaction")
    callback_url: Optional[StrictStr] = Field(default=None, description="The desired URL for the callback. This will internally create a Webhook Trigger. Make sure to leave this undefined to not update the field, if you pass null it will clear the webhook.", alias="callbackUrl")
    __properties: ClassVar[List[str]] = ["chain", "contractAddress", "escrowWalletId", "name", "description", "functionName", "payable", "nativeTransaction", "callbackUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionsTransactionIdPutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if callback_url (nullable) is None
        # and model_fields_set contains the field
        if self.callback_url is None and "callback_url" in self.model_fields_set:
            _dict['callbackUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionsTransactionIdPutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chain": obj.get("chain"),
            "contractAddress": obj.get("contractAddress"),
            "escrowWalletId": obj.get("escrowWalletId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "functionName": obj.get("functionName"),
            "payable": obj.get("payable"),
            "nativeTransaction": obj.get("nativeTransaction"),
            "callbackUrl": obj.get("callbackUrl")
        })
        return _obj



# coding: utf-8

"""
    M2M Gateway API

    The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework

    The version of the OpenAPI document: 0.1
    Contact: support@uxly.software
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.e_transaction_execution_status import ETransactionExecutionStatus
from typing import Optional, Set
from typing_extensions import Self

class TransactionExecution(BaseModel):
    """
    A single execution of a transaction- ie, a function call
    """ # noqa: E501
    deleted: Optional[StrictBool] = None
    updated: Optional[Union[StrictFloat, StrictInt]] = None
    created: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = Field(default=None, description="internal ID of the transaction execution")
    transaction_id: Optional[StrictStr] = Field(default=None, description="internal ID of the transaction", alias="transactionId")
    api_credential_id: Optional[StrictStr] = Field(default=None, description="ID of the API Credential used to execute the transaction. Note, this is not the API Key itself. This will be null if a user initiated the execution and not an API Credential", alias="apiCredentialId")
    user_id: Optional[StrictStr] = Field(default=None, description="The User ID that executed the transaction. This will be null if an API key was used instead of a user token.", alias="userId")
    status: Optional[ETransactionExecutionStatus] = None
    chain_transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the actual chain transaction in the internal chain service.", alias="chainTransactionId")
    completed_timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="completedTimestamp")
    __properties: ClassVar[List[str]] = ["deleted", "updated", "created", "id", "transactionId", "apiCredentialId", "userId", "status", "chainTransactionId", "completedTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionExecution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if api_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.api_credential_id is None and "api_credential_id" in self.model_fields_set:
            _dict['apiCredentialId'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionExecution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deleted": obj.get("deleted"),
            "updated": obj.get("updated"),
            "created": obj.get("created"),
            "id": obj.get("id"),
            "transactionId": obj.get("transactionId"),
            "apiCredentialId": obj.get("apiCredentialId"),
            "userId": obj.get("userId"),
            "status": obj.get("status"),
            "chainTransactionId": obj.get("chainTransactionId"),
            "completedTimestamp": obj.get("completedTimestamp")
        })
        return _obj



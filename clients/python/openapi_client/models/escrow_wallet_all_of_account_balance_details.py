# coding: utf-8

"""
    M2M Gateway API

    The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework

    The version of the OpenAPI document: 0.1
    Contact: support@uxly.software
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EscrowWalletAllOfAccountBalanceDetails(BaseModel):
    """
    EscrowWalletAllOfAccountBalanceDetails
    """ # noqa: E501
    type: Optional[StrictStr] = None
    ticker: Optional[StrictStr] = None
    chain_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Id of a chain", alias="chainId")
    token_address: Optional[StrictStr] = Field(default=None, description="string address of contract", alias="tokenAddress")
    account_address: Optional[StrictStr] = Field(default=None, description="string address of a wallet insight platform holds keys for", alias="accountAddress")
    balance: Optional[StrictStr] = Field(default=None, description="The balance of the token as a Big Number String")
    decimals: Optional[StrictInt] = Field(default=None, description="The number of decimals in the balance. Determined by the token type.")
    usd_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current value of the token in USD as determined by the latest oracle information", alias="usdValue")
    usd_value_timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usdValueTimestamp")
    __properties: ClassVar[List[str]] = ["type", "ticker", "chainId", "tokenAddress", "accountAddress", "balance", "decimals", "usdValue", "usdValueTimestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EscrowWalletAllOfAccountBalanceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EscrowWalletAllOfAccountBalanceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "ticker": obj.get("ticker"),
            "chainId": obj.get("chainId"),
            "tokenAddress": obj.get("tokenAddress"),
            "accountAddress": obj.get("accountAddress"),
            "balance": obj.get("balance"),
            "decimals": obj.get("decimals"),
            "usdValue": obj.get("usdValue"),
            "usdValueTimestamp": obj.get("usdValueTimestamp")
        })
        return _obj



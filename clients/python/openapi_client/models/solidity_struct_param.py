# coding: utf-8

"""
    M2M Gateway API

    The M2M Gateway API is for communication by 3rd party servers for automated tasks in the Framework

    The version of the OpenAPI document: 0.1
    Contact: support@uxly.software
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.e_solidity_abi_parameter_type import ESolidityAbiParameterType
from typing import Optional, Set
from typing_extensions import Self

class SolidityStructParam(BaseModel):
    """
    A single defined parameter for a transaction. This is
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Internal ID of the parameter.")
    struct_id: Optional[StrictStr] = Field(default=None, description="Internal ID struct that owns this parameter.", alias="structId")
    name: Optional[StrictStr] = Field(default=None, description="A name to assign to the parameter. You will pass values to the parameter using this name. For clarity, this should be the name of the parameter on the underlying contract method, but you can set it as whatever you want.")
    type: Optional[ESolidityAbiParameterType] = None
    type_struct_id: Optional[StrictStr] = Field(default=None, description="The ID of the sub-struct if the type is \"struct\"", alias="typeStructId")
    type_size: Optional[StrictInt] = Field(default=None, description="The size of the type for int, uint and bytes. Also used for fixed and ufixed; it is the first size of the type. This must follow the rules for the type; valid values for bytes are 1 to 32, for others is 256 % 8.", alias="typeSize")
    type_size2: Optional[StrictInt] = Field(default=None, description="The second size for the type. Only used for fixed and ufixed types.", alias="typeSize2")
    is_array: Optional[StrictBool] = Field(default=None, description="Set to true if the parameter takes an array of the type.", alias="isArray")
    array_size: Optional[StrictInt] = Field(default=None, description="If the type array takes a fixed number of elements (IE, 5), this will be set.", alias="arraySize")
    index: Optional[StrictInt] = Field(default=None, description="The index of the parameter in the contract method. This starts at 0 and must not skip numbers")
    value: Optional[StrictStr] = Field(default=None, description="The static value of the parameter, stored in the transaction itself. All parameters have to have a value at execution, but it can be a mix of static and dynamic parameters")
    type_struct: Optional[SolidityStructParamTypeStruct] = Field(default=None, alias="typeStruct")
    __properties: ClassVar[List[str]] = ["id", "structId", "name", "type", "typeStructId", "typeSize", "typeSize2", "isArray", "arraySize", "index", "value", "typeStruct"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SolidityStructParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type_struct
        if self.type_struct:
            _dict['typeStruct'] = self.type_struct.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SolidityStructParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "structId": obj.get("structId"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "typeStructId": obj.get("typeStructId"),
            "typeSize": obj.get("typeSize"),
            "typeSize2": obj.get("typeSize2"),
            "isArray": obj.get("isArray"),
            "arraySize": obj.get("arraySize"),
            "index": obj.get("index"),
            "value": obj.get("value"),
            "typeStruct": SolidityStructParamTypeStruct.from_dict(obj["typeStruct"]) if obj.get("typeStruct") is not None else None
        })
        return _obj

from openapi_client.models.solidity_struct_param_type_struct import SolidityStructParamTypeStruct
# TODO: Rewrite to not use raise_errors
SolidityStructParam.model_rebuild(raise_errors=False)

